# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# determine modal number of trials
data_amp_completeness <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
group_by(subject) |>
count() |>
ungroup() |>
mutate(exclude_amp_completeness = ifelse(n == 72, "include", "exclude")) |>
select(-n)
# data_amp_completeness |>
#   count(n)
data_amp_score <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
select(subject, trialcode, blockcode, correct) |>
mutate(evaluation = dplyr::case_when(trialcode == "prime_positive" & correct == 1 ~"true",
trialcode == "prime_negative" & correct == 0 ~"true",
.default = "false")) |>
group_by(subject) |>
summarize(AMP_score = sum(evaluation == "true")/72)
View(data_amp_score)
current_directory <- getwd()
current_directory
dat <- read_csv("../week 8/ldt_data.csv")
dat <- read_csv("../week 8/ldt_data.csv")
library(tidyverse)
library(patchwork)
install.packages("patchwork")
library(patchwork)
current_directory <- getwd()
current_directory
dat <- read_csv("../week 8/ldt_data.csv")
#check on the kind of data
summary(dat)
str(dat)
#change the kind of data
dat <- mutate(dat, language = factor(
x = language, # column to translate
levels = c(1, 2), # values of the original data in preferred order
labels = c("monolingual", "bilingual") # labels for display
))
dat %>%
group_by(language) %>%
count() %>%
ungroup()
dat %>%
group_by(language) %>%
count()
dat %>%
count()
#calculate the mean age (and SD) of the sample
dat %>%
summarise(mean_age = mean(age),
sd_age = sd(age),
n_values = n())
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# determine modal number of trials
data_amp_completeness <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
group_by(subject) |>
count() |>
ungroup() |>
mutate(exclude_amp_completeness = ifelse(n == 72, "include", "exclude")) |>
select(-n)
# data_amp_completeness |>
#   count(n)
data_amp_score <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
select(subject, trialcode, blockcode, correct) |>
mutate(evaluation = dplyr::case_when(trialcode == "prime_positive" & correct == 1 ~"true",
trialcode == "prime_negative" & correct == 0 ~"true",
.default = "false")) |>
group_by(subject) |>
summarize(AMP_score = sum(evaluation == "true")/72)
data_amp_score <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
select(subject, trialcode, blockcode, correct) |>
mutate(evaluation = dplyr::case_when(trialcode == "prime_positive" & correct
== 1 ~"true",
trialcode == "prime_negative" & correct
== 0 ~"true",
.default = "false")) |>
group_by(subject) |>
summarize(AMP_score = sum(evaluation == "true")/72) |>
n()
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# determine modal number of trials
data_amp_completeness <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
group_by(subject) |>
count() |>
ungroup() |>
mutate(exclude_amp_completeness = ifelse(n == 72, "include", "exclude")) |>
select(-n)
# data_amp_completeness |>
#   count(n)
data_amp_score <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
select(subject, trialcode, blockcode, correct) |>
mutate(evaluation = dplyr::case_when(trialcode == "prime_positive" & correct
== 1 ~"true",
trialcode == "prime_negative" & correct
== 0 ~"true",
.default = "false")) |>
group_by(subject) |>
summarize(AMP_score = sum(evaluation == "true")/72)
data_amp_score <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
select(subject, trialcode, blockcode, correct) |>
mutate(evaluation = dplyr::case_when(trialcode == "prime_positive" & correct
== 1 ~"true",
trialcode == "prime_negative" & correct
== 0 ~"true",
.default = "false")) |>
group_by(subject) |>
summarize(AMP_score = sum(evaluation == "true")/72,
n_values = n())
View(data_amp_score)
age_stats_2 <- dat %>%
group_by(language) %>%
summarise(mean_age = mean(age),
sd_age = sd(age),
n_values = n()) %>%
ungroup()
View(age_stats_2)
#calculate the mean age (and SD) of the sample
age_stats <- dat %>%
summarise(mean_age = mean(age),
sd_age = sd(age),
n_values = n())
View(age_stats)
#calculate the mean age (and SD) of the sample
age_stats_all <- dat %>%
summarise(mean_age = mean(age),
sd_age = sd(age),
n_values = n())
age_stats_seperate <- dat %>%
group_by(language) %>%
summarise(mean_age = mean(age),
sd_age = sd(age),
n_values = n()) %>%
ungroup()
#Bar chart of counts
ggplot(data = dat, mapping = aes(x = language)) +
geom_bar()
#Bar chart of counts
ggplot(data = dat, mapping = aes(x = language)) +
geom_bar()
#Bar chart of counts
bar_chart <- ggplot(data = dat, mapping = aes(x = language)) +
geom_bar()
View(bar_chart)
bar chart <- ggplot(data = dat, mapping = aes(x = language)) +
bar_chart <- ggplot(data = dat, mapping = aes(x = language)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(name = "Percent", labels=scales::percent)
View(bar_chart)
