y = mean_evaluation, label = subject)) +
geom_jitter(color = "red")
p1 <- p + geom_text() + labs(title = "geom_text()")
p2 <- p + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
install.packages("remotes")
remotes::install_github("hughjonesd/ggmagnify")
library(ggplot2)
library(ggmagnify)
from <- c(xmin = 0.45, xmax = 0.68, ymin = 0.85, ymax = 1.3)
# Names xmin, xmax, ymin, ymax are optional:
to <- c(xmin= 0.00, xmax = 0.25, ymin = 2, ymax= 3.3)
ggpi <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, label = subject)) +
geom_jitter()
ggpi + geom_magnify(from = from, to = to, colour = "black", linewidth = 0.7, proj.linetype = 3)
#split histogramm
ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation,
colour = gender)) +
geom_histogram(binwidth = 1) +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
p
#split violine
# how to install the introdataviz package to get split and half violin plots
#devtools::install_github("psyteachr/introdataviz")
ggplot(data_processed_after_exclusions, aes(x = gender, y= mean_evaluation)) +
geom_violin() +
geom_boxplot(width = .2, fatten = NULL) +
stat_summary(fun = "mean", geom = "point") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1) +
theme_minimal()
library(introdataviz)
ggplot(data_processed_after_exclusions, aes(x = "", y = mean_evaluation, fill = gender)) +
introdataviz::geom_split_violin(alpha = .4, trim = FALSE) +
geom_boxplot(width = .2, alpha = .6, fatten = NULL, show.legend = FALSE) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
scale_x_discrete(name = "gender", labels = c("male", "female", "non-binary")) +
scale_y_continuous(name = "self-report") +
theme_minimal()
install.packages("devtools")
library(devtools)
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
library(ggExtra)
p <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
ggMarginal(p, type = "histogram", groupColour = TRUE, groupFill = TRUE)
p <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
ggMarginal(p, type = "density", groupColour = TRUE, groupFill = TRUE)
library(ggrepel)
p <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, label = subject)) +
geom_jitter(color = "red")
p1 <- p + geom_text() + labs(title = "geom_text()")
p2 <- p + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
install.packages("remotes")
remotes::install_github("hughjonesd/ggmagnify")
library(ggplot2)
library(ggmagnify)
from <- c(xmin = 0.45, xmax = 0.68, ymin = 0.85, ymax = 1.3)
# Names xmin, xmax, ymin, ymax are optional:
to <- c(xmin= 0.00, xmax = 0.25, ymin = 2, ymax= 3.3)
ggpi <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, label = subject)) +
geom_jitter()
ggpi + geom_magnify(from = from, to = to, colour = "black", linewidth = 0.7, proj.linetype = 3)
#split histogramm
ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation,
colour = gender)) +
geom_histogram(binwidth = 1) +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
p
#split violine
# how to install the introdataviz package to get split and half violin plots
#devtools::install_github("psyteachr/introdataviz")
ggplot(data_processed_after_exclusions, aes(x = gender, y= mean_evaluation)) +
geom_violin() +
geom_boxplot(width = .2, fatten = NULL) +
stat_summary(fun = "mean", geom = "point") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1) +
theme_minimal()
library(introdataviz)
ggplot(data_processed_after_exclusions, aes(x = "", y = mean_evaluation, fill = gender)) +
introdataviz::geom_split_violin(alpha = .4, trim = FALSE) +
geom_boxplot(width = .2, alpha = .6, fatten = NULL, show.legend = FALSE) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
scale_x_discrete(name = "gender", labels = c("male", "female", "non-binary")) +
scale_y_continuous(name = "self-report") +
theme_minimal()
#split raincloud plot
rain_height <- .1
library(ggplot2)
library(magrittr)
ggplot(data_processed_after_exclusions, aes(x = "", y = mean_evaluation, fill = gender)) +
# clouds
introdataviz::geom_flat_violin(trim=FALSE, alpha = 0.4,
position = position_nudge(x = rain_height+.05)) +
# rain
geom_point(aes(colour = gender), size = 2, alpha = .5, show.legend = FALSE,
position = position_jitter(width = rain_height, height = 0)) +
# boxplots
geom_boxplot(width = rain_height, alpha = 0.4, show.legend = FALSE,
outlier.shape = NA,
position = position_nudge(x = -rain_height*2)) +
# mean and SE point in the cloud
stat_summary(fun.data = mean_cl_normal, mapping = aes(color = gender), show.legend = FALSE,
position = position_nudge(x = rain_height * 3)) +
# adjust layout
scale_x_discrete(name = "", expand = c(rain_height*3, 0, 0, 0.7)) +
scale_y_continuous(name = "self-report") +
coord_flip() +
# custom colours and theme
scale_fill_brewer(palette = "Dark2", name = "gender") +
scale_colour_brewer(palette = "Dark2") +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
legend.position = c(0.8, 0.8),
legend.background = element_rect(fill = "white", color = "white"))
install.packages("remotes")
install.packages("remotes")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
library(ggExtra)
p <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
ggMarginal(p, type = "histogram", groupColour = TRUE, groupFill = TRUE)
p <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
ggMarginal(p, type = "density", groupColour = TRUE, groupFill = TRUE)
library(ggrepel)
p <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, label = subject)) +
geom_jitter(color = "red")
p1 <- p + geom_text() + labs(title = "geom_text()")
p2 <- p + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
#install.packages("remotes")
#remotes::install_github("hughjonesd/ggmagnify")
library(ggplot2)
library(ggmagnify)
from <- c(xmin = 0.45, xmax = 0.68, ymin = 0.85, ymax = 1.3)
# Names xmin, xmax, ymin, ymax are optional:
to <- c(xmin= 0.00, xmax = 0.25, ymin = 2, ymax= 3.3)
ggpi <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, label = subject)) +
geom_jitter()
ggpi + geom_magnify(from = from, to = to, colour = "black", linewidth = 0.7, proj.linetype = 3)
#split histogramm
ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation,
colour = gender)) +
geom_histogram(binwidth = 1) +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
p
#split violine
# how to install the introdataviz package to get split and half violin plots
#devtools::install_github("psyteachr/introdataviz")
ggplot(data_processed_after_exclusions, aes(x = gender, y= mean_evaluation)) +
geom_violin() +
geom_boxplot(width = .2, fatten = NULL) +
stat_summary(fun = "mean", geom = "point") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1) +
theme_minimal()
library(introdataviz)
ggplot(data_processed_after_exclusions, aes(x = "", y = mean_evaluation, fill = gender)) +
introdataviz::geom_split_violin(alpha = .4, trim = FALSE) +
geom_boxplot(width = .2, alpha = .6, fatten = NULL, show.legend = FALSE) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
scale_x_discrete(name = "gender", labels = c("male", "female", "non-binary")) +
scale_y_continuous(name = "self-report") +
theme_minimal()
#split raincloud plot
rain_height <- .1
library(ggplot2)
library(magrittr)
ggplot(data_processed_after_exclusions, aes(x = "", y = mean_evaluation, fill = gender)) +
# clouds
introdataviz::geom_flat_violin(trim=FALSE, alpha = 0.4,
position = position_nudge(x = rain_height+.05)) +
# rain
geom_point(aes(colour = gender), size = 2, alpha = .5, show.legend = FALSE,
position = position_jitter(width = rain_height, height = 0)) +
# boxplots
geom_boxplot(width = rain_height, alpha = 0.4, show.legend = FALSE,
outlier.shape = NA,
position = position_nudge(x = -rain_height*2)) +
# mean and SE point in the cloud
stat_summary(fun.data = mean_cl_normal, mapping = aes(color = gender), show.legend = FALSE,
position = position_nudge(x = rain_height * 3)) +
# adjust layout
scale_x_discrete(name = "", expand = c(rain_height*3, 0, 0, 0.7)) +
scale_y_continuous(name = "self-report") +
coord_flip() +
# custom colours and theme
scale_fill_brewer(palette = "Dark2", name = "gender") +
scale_colour_brewer(palette = "Dark2") +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
legend.position = c(0.8, 0.8),
legend.background = element_rect(fill = "white", color = "white"))
#split histogramm
data_processed_after_exclusions <- data_processed_after_exclusions |>
dplyr::filter(gender == "male" | gender == "female")
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
colour = gender)) +
geom_histogram(binwidth = 0.1) +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
#split violin
ggplot(data_processed_after_exclusions, aes(x = "", y = AMP_score, fill = gender)) +
introdataviz::geom_split_violin(alpha = .4, trim = FALSE) +
geom_boxplot(width = .2, alpha = .6, fatten = NULL, show.legend = FALSE) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
scale_x_discrete(name = "gender", labels = c("male", "female", "non-binary")) +
scale_y_continuous(name = "self-report") +
theme_minimal()
library(devtools)
library(patchwork)
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p1 + p2
p1 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
colour = gender)) +
geom_histogram(binwidth = 0.1) +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
p2 <- ggplot(data_processed_after_exclusions, aes(x = "", y = AMP_score, fill = gender)) +
introdataviz::geom_split_violin(alpha = .4, trim = FALSE) +
geom_boxplot(width = .2, alpha = .6, fatten = NULL, show.legend = FALSE) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
scale_x_discrete(name = "gender", labels = c("male", "female", "non-binary")) +
scale_y_continuous(name = "self-report") +
theme_minimal()
p1 + p2
ggsave("combined_plot.pdf", plot = last_plot(),dpi = 300)
ggsave("combined_plot.pdf", plot = last_plot())
ggsave("combined_plot.png", plot = last_plot(),dpi = 300)
View(data_processed_after_exclusions)
t.test(AMP_score ~ gender, var.equal= TRUE, alternative= "two.sided")
data_processed_after_exclusions |>
t.test(AMP_score ~ gender, var.equal= TRUE, alternative= "two.sided")
data_processed_after_exclusions |>
mutate(gender = as.factor(gender)) |>
t.test(AMP_score ~ gender, var.equal= TRUE, alternative= "two.sided")
library(psych)
data_processed_after_exclusions |>
describeBy(AMP_score, gender)
data_processed_after_exclusions |>
describeBy(data_processed_after_exclusions$AMP_score, data_processed_after_exclusions$gender)
data_processed_after_exclusions <- data_processed_after_exclusions |>
mutate(gender = as.factor(gender))
data_processed_after_exclusions <- data_processed_after_exclusions |>
mutate(gender = as.factor(gender)) |>
dplyr::filter(gender == "male" | gender == "female")
data_processed_after_exclusions <- data_processed_after_exclusions |>
mutate(gender = as.factor(gender)) |>
dplyr::filter(gender == "male" | gender == "female")
data_processed_after_exclusions |>
t.test(AMP_score ~ gender, var.equal= TRUE, alternative= "two.sided")
library(stats)
data_processed_after_exclusions |>
t.test(AMP_score ~ gender, var.equal= TRUE, alternative= "two.sided")
t.test(AMP_score ~ gender, var.equal= TRUE, alternative= "two.sided")
t.test(data_processed_after_exclusions$AMP_score ~ data_processed_after_exclusions$gender, var.equal= TRUE, alternative= "two.sided")
t.test(data_processed_after_exclusions$mean_evaluation ~ data_processed_after_exclusions$gender, var.equal= TRUE, alternative= "two.sided")
