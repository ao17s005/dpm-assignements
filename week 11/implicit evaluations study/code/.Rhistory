mutate(sport_success = as.factor(sport_success), sport_type = as.factor(sport_type))
ggplot(data_steca2018, aes(x = sport_success, y = energy_observed_score,
shape = sport_type,
group = sport_type,
color = sport_type)) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = "mean", geom = "line") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2) +
scale_color_manual(values = c("blue", "darkorange")) +
theme_classic()
ggplot(data_steca2018, aes(x = sport_success, y = energy_observed_score,
shape = sport_type,
group = sport_type,
color = sport_type)) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = "mean", geom = "line") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2) +
scale_color_manual(values = c("blue", "darkorange", "red")) +
theme_classic()
data_steca2018 <- data_steca2018 |>
mutate(sport_success = as.factor(sport_success), sport_type = as.factor(sport_type),
sport_specific = as.factor(sport_specific), sport= as.factor(sport))
ggplot(data_steca2018, aes(x = sport, y = energy_observed_score,
shape = sport_type,
group = sport_type,
color = sport_type)) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = "mean", geom = "line") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2) +
scale_color_manual(values = c("blue", "darkorange", "red")) +
theme_classic()
ggplot(data_steca2018, aes(x = sport_success, y = energy_observed_score)) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = "mean", geom = "line") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2) +
scale_color_manual(values = c("blue", "darkorange")) +
theme_classic()
ggplot(data_steca2018, aes(x = sport_success, y = energy_observed_score,
shape = sport_type,
group = sport_type,
color = sport_type)) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = "mean", geom = "line") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2) +
scale_color_manual(values = c("blue", "darkorange", "red")) +
theme_classic()
ggplot(data_steca2018, aes(x = sport_specific, y = energy_observed_score,
shape = sport_type,
group = sport_type,
color = sport_type)) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = "mean", geom = "line") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2) +
scale_color_manual(values = c("blue", "darkorange", "red")) +
theme_classic()
ggplot(data_steca2018, aes(x = sport, y = energy_observed_score,
shape = sport_success,
group = sport_success,
color = sport_success)) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = "mean", geom = "line") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2) +
scale_color_manual(values = c("blue", "darkorange", "red")) +
theme_classic()
ggplot(data_steca2018, aes(x = sport_type, y = energy_observed_score,
shape = sport_success,
group = sport_success,
color = sport_success)) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = "mean", geom = "line") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2) +
scale_color_manual(values = c("blue", "darkorange", "red")) +
theme_classic()
data_steca2018 <- data_steca2018 |>
mutate(sport_success = as.factor(sport_success), sport_type = as.factor(sport_type),
sport_specific = as.factor(sport_specific), sport= as.factor(sport)) |>
filter(sport_type != "0")
ggplot(data_steca2018, aes(x = sport_type, y = energy_observed_score,
shape = sport_success,
group = sport_success,
color = sport_success)) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = "mean", geom = "line") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2) +
scale_color_manual(values = c("blue", "darkorange", "red")) +
theme_classic()
ggplot(data_steca2018, aes(x = sport_success, y = energy_observed_score,
shape = sport_type,
group = sport_type,
color = sport_type)) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = "mean", geom = "line") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2) +
scale_color_manual(values = c("blue", "darkorange", "red")) +
theme_classic()
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
alpha(subset(data_processed_after_exclusions, select = c(like, positive, prefer)), check.keys = TRUE)
library(psych)
alpha(subset(data_processed_after_exclusions, select = c(like, positive, prefer)), check.keys = TRUE)
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
#
axial_histograms <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
ggMarginal(p, type = "histogram", groupColour = TRUE, groupFill = TRUE)
ggMarginal(axial_histograms, type = "histogram", groupColour = TRUE, groupFill = TRUE)
#
p <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
ggMarginal(p, type = "histogram", groupColour = TRUE, groupFill = TRUE)
library(ggExtra)
ggMarginal(p, type = "histogram", groupColour = TRUE, groupFill = TRUE)
p <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
ggMarginal(p, type = "density", groupColour = TRUE, groupFill = TRUE)
# histogram by gender
p <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary"))
ggMarginal(p, type = "histogram", groupColour = TRUE, groupFill = TRUE)
library(ggrepel)
p <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, label = subject)) +
geom_jitter(color = "red")
p1 <- p + geom_text() + labs(title = "geom_text()")
p2 <- p + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
library(ggplot2)
library(ggmagnify)
from <- c(xmin = 0.45, xmax = 0.68, ymin = 0.85, ymax = 1.3)
# Names xmin, xmax, ymin, ymax are optional:
to <- c(xmin= 0.00, xmax = 0.25, ymin = 2, ymax= 3.3)
ggpi <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, label = subject)) +
geom_jitter()
ggpi + geom_magnify(from = from, to = to, colour = "black", linewidth = 0.7, proj.linetype = 3)
correlation_H1 <- cor(data_processed_after_exclusions$mean_evaluation,
data_processed_after_exclusions$AMP_score,
method = "person")
correlation_H1 <- cor(data_processed_after_exclusions$mean_evaluation,
data_processed_after_exclusions$AMP_score,
method = "pearson")
correlation_H1
correlation_H1 <- cor.test(data_processed_after_exclusions$mean_evaluation,
data_processed_after_exclusions$AMP_score,
method = "pearson")
correlation_H1
# histogram by gender
p <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary")) +
theme(legend.position = c(.15, .7))
ggMarginal(p, type = "histogram", groupColour = TRUE, groupFill = TRUE)
# density plot by gender
p <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary")) +
theme(legend.position = c(.15, .7))
ggMarginal(p, type = "density", groupColour = TRUE, groupFill = TRUE)
# density plot by gender
p <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary")) +
theme(legend.position = c(.7, .15))
ggMarginal(p, type = "density", groupColour = TRUE, groupFill = TRUE)
# density plot by gender
p <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary")) +
theme(legend.position = c(.7, .15), legend.background = element_rect(color = "black",
size = 0.5, linetype = "solid"))
# density plot by gender
p <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary")) +
theme(legend.position = c(.7, .15), legend.background = element_rect(color = "black",
size = 0.5))
ggMarginal(p, type = "density", groupColour = TRUE, groupFill = TRUE)
# density plot by gender
p <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary")) +
theme(legend.position = c(.12, .10), legend.background = element_rect(color = "black",
size = 0.5))
ggMarginal(p, type = "density", groupColour = TRUE, groupFill = TRUE)
# density plot by gender
p <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary")) +
theme(legend.position = c(.12, .20), legend.background = element_rect(color = "black",
size = 0.5))
ggMarginal(p, type = "density", groupColour = TRUE, groupFill = TRUE)
# density plot by gender
p <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary")) +
theme(legend.position = c(.2, .20), legend.background = element_rect(color = "black",
size = 0.5))
ggMarginal(p, type = "density", groupColour = TRUE, groupFill = TRUE)
# histogram by gender
p <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary")) +
theme(legend.position = c(.15, .7), legend.background = element_rect(color = "black",
size = 0.5))
ggMarginal(p, type = "histogram", groupColour = TRUE, groupFill = TRUE)
# density plot by gender
p <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary")) +
theme(legend.position = c(.2, .20), legend.background = element_rect(color = "black",
size = 0.5))
ggMarginal(p, type = "density", groupColour = TRUE, groupFill = TRUE)
# histogram by gender
histogram <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary")) +
theme(legend.position = c(.15, .7), legend.background = element_rect(color = "black",
size = 0.5))
ggMarginal(histogram, type = "histogram", groupColour = TRUE, groupFill = TRUE)
# density plot by gender
density <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
scale_colour_discrete(name = "gender",
labels = c("male", "female", "non-binary")) +
theme(legend.position = c(.2, .20), legend.background = element_rect(color = "black",
size = 0.5))
ggMarginal(density, type = "density", groupColour = TRUE, groupFill = TRUE)
library(scales) #for viridis
# histogram by gender
histogram <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, colour = gender)) +
geom_point() +
geom_smooth(aes(color = gender), method = "lm", se = FALSE) +  # Regression line by gender
scale_colour_manual(name = "gender",
values = c("female" = "#73D055FF", "male" = "#404788FF", "nonbinary" = "#FDE725FF")) +
theme(legend.position = c(.15, .7), legend.background = element_rect(color = "black",
size = 0.5))
ggMarginal(histogram, type = "histogram", groupColour = TRUE, groupFill = TRUE)
# density plot by gender
density <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
geom_smooth(aes(color = gender), method = "lm", se = FALSE) +  # Regression line by gender
scale_colour_manual(name = "gender",
values = c("female" = "#73D055FF", "male" = "#404788FF", "nonbinary" = "#FDE725FF")) +
theme(legend.position = c(.2, .20), legend.background = element_rect(color = "black",
size = 0.5))
ggMarginal(density, type = "density", groupColour = TRUE, groupFill = TRUE)
# density plot by gender
density <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation ,
y = AMP_score, colour = gender)) +
geom_point() +
geom_smooth(aes(color = gender), method = "lm", se = FALSE) +  # Regression line by gender
scale_colour_manual(name = "gender", labels = c("Female", "Male", "Non-binary"),
values = c("female" = "#73D055FF", "male" = "#404788FF", "nonbinary" = "#FDE725FF")) +
theme(legend.position = c(.2, .20), legend.background = element_rect(color = "black",
size = 0.5))
ggMarginal(density, type = "density", groupColour = TRUE, groupFill = TRUE)
# histogram by gender
histogram <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation, colour = gender)) +
geom_point() +
geom_smooth(aes(color = gender), method = "lm", se = FALSE) +  # Regression line by gender
scale_colour_manual(name = "gender",
values = c("female" = "#73D055FF", "male" = "#404788FF", "nonbinary" = "#FDE725FF")) +
theme(legend.position = c(.15, .7), legend.background = element_rect(color = "black",
size = 0.5)) +
labs(x = "Self-report Evaluations", y = "AMP Score",
title ="Relationship")
ggMarginal(histogram, type = "histogram", groupColour = TRUE, groupFill = TRUE)
